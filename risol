appointmentTooltipTemplate: function(model) {
    const booking = model.appointmentData;

    // Format tanggal agar lebih rapi
    const formatDate = (date) => {
        if (!date) return "No Date";
        const d = new Date(date);
        return isNaN(d.getTime()) ? "No Date" : d.toISOString().split("T")[0];
    };

    // ID unik untuk tombol delete
    const deleteButtonId = `delete-btn-${booking.id}`;
    const tooltipHtml = `
        <div>
            <b>${booking.text || "No Title"}</b><br>
            Person: ${booking.person || "No Person"}<br>
            ${formatDate(booking.startDate)} - ${formatDate(booking.endDate)}<br>
            Created By: ${booking.creator || "No Name"}<br><br>
            <button id="${deleteButtonId}" class="btn btn-danger btn-sm">Delete</button>
        </div>
    `;

    // Event listener harus ditambahkan setelah tooltip muncul
    setTimeout(() => {
        const deleteButton = document.getElementById(deleteButtonId);
        if (deleteButton) {
            deleteButton.addEventListener("click", function (event) {
                event.stopPropagation(); // Mencegah popup scheduler terbuka
                if (confirm("Are you sure you want to delete this booking?")) {
                    sendRequest(apiurl + "/" + modname + "/" + booking.id, "DELETE")
                        .then(function (response) {
                            if (response.status === "success") {
                                alert("Booking deleted successfully!");
                                $("#scheduler").dxScheduler("instance").getDataSource().reload();
                            } else {
                                alert("Error: " + (response.message || "Failed to delete booking."));
                            }
                        })
                        .catch(function (error) {
                            alert("Error: " + (error.responseText || "Unknown error."));
                        });
                }
            });
        }
    }, 500); // Timeout agar DOM siap

    return tooltipHtml;
}


appointmentTooltipTemplate: function(model) {
    const booking = model.appointmentData;

    // Format tanggal agar lebih rapi
    const formatDate = (date) => {
        if (!date) return "No Date";
        const d = new Date(date);
        return isNaN(d.getTime()) ? "No Date" : d.toISOString().split("T")[0];
    };

    // HTML untuk tooltip
    const deleteButtonId = `delete-btn-${booking.id}`;
    const tooltipHtml = `
        <div>
            <b>${booking.text || "No Title"}</b><br>
            Person: ${booking.person || "No Person"}<br>
            ${formatDate(booking.startDate)} - ${formatDate(booking.endDate)}<br>
            Created By: ${booking.creator || "No Name"}<br><br>
            <button id="${deleteButtonId}" class="btn btn-danger btn-sm">Delete</button>
        </div>
    `;

    // Event listener harus ditambahkan setelah tooltip muncul
    setTimeout(() => {
        const deleteButton = document.getElementById(deleteButtonId);
        if (deleteButton) {
            deleteButton.addEventListener("click", function () {
                if (confirm("Are you sure you want to delete this booking?")) {
                    sendRequest(apiurl + "/" + modname + "/" + booking.id, "DELETE")
                        .then(function (response) {
                            if (response.status === "success") {
                                alert("Booking deleted successfully!");
                                $("#scheduler").dxScheduler("instance").getDataSource().reload();
                            } else {
                                alert("Error: " + (response.message || "Failed to delete booking."));
                            }
                        })
                        .catch(function (error) {
                            alert("Error: " + (error.responseText || "Unknown error."));
                        });
                }
            });
        }
    }, 500); // Timeout lebih lama agar DOM siap

    return tooltipHtml;
}
