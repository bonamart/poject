onAppointmentAdding: function(e) {
    console.log("onAppointmentAdding triggered", e);
    const appointmentData = e.appointmentData;
    let scheduler = e.component;
    
    let guestCount = safeArray(appointmentData.guest).length;
    let familyCount = safeArray(appointmentData.family).length;
    let employeeCount = safeArray(appointmentData.employee).length;
    let totalNewGuests = guestCount + familyCount + employeeCount;

    if (totalNewGuests < 1) {
        DevExpress.ui.notify("Total guests harus lebih dari 0!", "error", 2000);
        e.cancel = true;
        return; // Hentikan eksekusi
    }

    let selectedRoom = appointmentData.ghm_room_id;
    let roomData = roomsWithLocations.find(room => room.id === selectedRoom);
    
    if (!roomData) {
        DevExpress.ui.notify("Room not found", "error", 3000);
        e.cancel = true;
        return;
    }

    let sector = roomData.sector;
    let roomCapacity = roomData.roomAccupancy || 0;
    let dailyGuestCount = getTotalGuestsPerDay(scheduler, selectedRoom, appointmentData.startDate, appointmentData.endDate);
    let bookingStart = new Date(appointmentData.startDate);
    let bookingEnd = new Date(appointmentData.endDate);

    for (let d = new Date(bookingStart); d <= bookingEnd; d.setDate(d.getDate() + 1)) {
        let dateKey = d.toISOString().split("T")[0]; // Format YYYY-MM-DD
        let totalGuestsAfterAdding = (dailyGuestCount[dateKey] || 0) + totalNewGuests;

        if (totalGuestsAfterAdding > roomCapacity) {
            DevExpress.ui.notify(`Kapasitas penuh pada ${dateKey}! (${dailyGuestCount[dateKey] || 0}/${roomCapacity})`, "error", 3000);
            e.cancel = true;
            return; // Hentikan eksekusi
        }
    }

    console.log("Capacity check passed. Proceeding with Swal confirmation...");

    // Simpan event tapi tidak langsung submit
    e.cancel = true; // Mencegah penyimpanan otomatis oleh DevExtreme Scheduler

    Swal.fire({
        title: 'What do you want to do?',
        text: 'Choose an option for this booking',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Submit Now',
        cancelButtonText: 'Save as Draft',
        reverseButtons: true
    }).then((result) => {
        if (result.dismiss === Swal.DismissReason.cancel) {
            console.log('Draft');
            sendRequest(apiurl + "/" + modname, "POST", {
                requestStatus: 0,
                text: appointmentData.text,
                description: appointmentData.description,
                startDate: appointmentData.startDate,
                endDate: appointmentData.endDate,
                ghm_room_id: appointmentData.ghm_room_id,
                employee: appointmentData.employee,
                guest: appointmentData.guest,
                family: appointmentData.family,
                sector: sector,
            });
        } else if (result.isConfirmed) {
            console.log('Submit');
            sendRequest(apiurl + "/" + modname, "POST", {
                requestStatus: 1,
                text: appointmentData.text,
                description: appointmentData.description,
                startDate: appointmentData.startDate,
                endDate: appointmentData.endDate,
                ghm_room_id: appointmentData.ghm_room_id,
                employee: appointmentData.employee,
                guest: appointmentData.guest,
                family: appointmentData.family,
                sector: sector,
            }).then(function(response) {
                if (response.status === 'success') {
                    const reqid = response.data.id;
                    sendRequest(apiurl + "/submissionrequest/" + reqid + "/" + modelclass, "POST", {
                        requestStatus: 1,
                        action: 'submission',
                        approvalAction: 1,
                        approvalType: '',
                        remarks: ''
                    }).then(function(response) {
                        if (response.status === 'success') {
                            Swal.fire({
                                icon: 'success',
                                title: 'Saved',
                                text: 'The submission has been submitted.',
                            });
                        }
                    });
                }
            });
        }
    });
}
