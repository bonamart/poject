var modname = 'ghmrequest';
var modelclass = 'Ghm';
var popupmode;
var dataSubmitted = false;
var schedulerInstance;
var roomsWithLocations = []; // Data ruangan dengan lokasi
var uniqueLocations = []; // Daftar lokasi unik
var booking = []; // Data booking

// Fungsi untuk mengonversi array ke JSON
function serializeToJSON(data) {
    return JSON.stringify(data);
}

// Fungsi untuk mengonversi JSON ke array
function deserializeFromJSON(jsonString) {
    return JSON.parse(jsonString);
}

// Fungsi untuk mengirim permintaan ke API
function sendRequest(url, method = 'GET', data) {
    const d = $.Deferred();

    logRequest(method, url, data);

    $.ajax(url, {
        method,
        data,
        cache: false,
        xhrFields: { withCredentials: true },
    }).done((result) => {
        d.resolve(method === 'GET' ? result.data : result);
        // Memuat ulang scheduler setelah operasi berhasil
        if (method !== 'GET') {
            reloadScheduler();
        }
    }).fail((xhr) => {
        d.reject(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
    });

    return d.promise();
}

// Fungsi untuk memuat ulang scheduler
function reloadScheduler() {
    if (schedulerInstance) {
        schedulerInstance.getDataSource().reload().done(() => {
            console.log("Data scheduler dimuat ulang dari server.");
            schedulerInstance.repaint();
            console.log("Tampilan scheduler diperbarui.");
        }).fail((error) => {
            console.error("Gagal memuat ulang data scheduler:", error);
        });
    } else {
        console.error("Scheduler instance belum diinisialisasi.");
    }
}

// Fungsi untuk memperbarui tampilan scheduler
function repaintScheduler() {
    if (schedulerInstance) {
        schedulerInstance.repaint();
        console.log("Tampilan scheduler diperbarui.");
    } else {
        console.error("Scheduler instance belum diinisialisasi.");
    }
}

// Fungsi untuk memperbarui daftar ruangan berdasarkan lokasi yang dipilih
function updateRoomSelector(location) {
    const filteredRooms = roomsWithLocations.filter(room => room.location === location);
    $('#room-selector').dxSelectBox({
        dataSource: filteredRooms,
        displayExpr: 'text',
        valueExpr: 'id',
        value: null,
        placeholder: 'Select Room',
        onValueChanged: function (e) {
            const selectedRoomId = e.value;
            updateScheduler(location, selectedRoomId);
        }
    });
    updateScheduler(location, null);
}

// Fungsi untuk memperbarui scheduler berdasarkan ruangan yang dipilih
function updateScheduler(location, roomId) {
    let dataSource = roomsWithLocations.filter(room => room.location === location);
    if (roomId) {
        dataSource = dataSource.filter(room => room.id === roomId);
    }

    if (!schedulerInstance) {
        initializeScheduler(dataSource);
    } else {
        schedulerInstance.option('dataSource', dataSource);
        repaintScheduler();
    }
}

// Fungsi untuk menginisialisasi scheduler
function initializeScheduler(dataSource) {
    schedulerInstance = $("#scheduler").dxScheduler({
        timeZone: 'Asia/Makassar',
        dataSource: dataSource,
        views: ['month'],
        currentView: 'month',
        currentDate: new Date(),
        firstDayOfWeek: 1,
        startDayHour: 10,
        endDayHour: 22,
        height: 710,
        groups: ['ghm_room_id'],
        resources: [
            {
                fieldExpr: 'ghm_room_id',
                allowMultiple: false,
                dataSource: dataSource,
                label: 'Room Name'
            }
        ],
        editing: {
            allowAdding: true,
            allowUpdating: true,
            allowDeleting: true
        },
        onAppointmentAdding: function (e) {
            const appointmentData = e.appointmentData;
            sendRequest(apiurl + "/" + modname, "POST", appointmentData)
                .then(function (response) {
                    if (response.status === 'success') {
                        console.log("Appointment berhasil ditambahkan.");
                        reloadScheduler(); // Memuat ulang data dan memperbarui tampilan
                    }
                })
                .catch(function (error) {
                    console.error("Gagal menambahkan appointment:", error);
                });
        },
        onAppointmentUpdating: function (e) {
            const appointmentData = e.newData;
            sendRequest(apiurl + "/" + modname + "/" + e.oldData.id, "PUT", appointmentData)
                .then(function (response) {
                    if (response.status === 'success') {
                        console.log("Appointment berhasil diperbarui.");
                        reloadScheduler(); // Memuat ulang data dan memperbarui tampilan
                    }
                })
                .catch(function (error) {
                    console.error("Gagal memperbarui appointment:", error);
                });
        },
        onAppointmentDeleting: function (e) {
            sendRequest(apiurl + "/" + modname + "/" + e.appointmentData.id, "DELETE")
                .then(function (response) {
                    if (response.status === 'success') {
                        console.log("Appointment berhasil dihapus.");
                        reloadScheduler(); // Memuat ulang data dan memperbarui tampilan
                    }
                })
                .catch(function (error) {
                    console.error("Gagal menghapus appointment:", error);
                });
        }
    }).dxScheduler("instance");
}

// Fungsi untuk memeriksa apakah suatu tanggal adalah akhir pekan
function isWeekEnd(date) {
    const day = date.getDay();
    return day === 0 || day === 6;
}

// Fungsi untuk memeriksa apakah dua rentang tanggal saling tumpang tindih
function isDateOverlap(start1, end1, start2, end2) {
    return (new Date(start1) <= new Date(end2)) && (new Date(start2) <= new Date(end1));
}

// Inisialisasi saat dokumen siap
$(document).ready(function () {
    // Load data awal untuk ruangan dan lokasi
    sendRequest(apiurl + "/rooms", "GET").then(function (response) {
        roomsWithLocations = response.data;
        uniqueLocations = [...new Set(roomsWithLocations.map(room => room.location))];
        updateRoomSelector(uniqueLocations[0]);
    });

    // Inisialisasi form dan scheduler
    initializeScheduler([]);

    // Tombol reload manual
    $('#reload-button').dxButton({
        text: 'Reload Scheduler',
        onClick() {
            reloadScheduler();
        },
    });
});
