setTimeout(() => {
    const actionButton = document.getElementById(actionButtonId);
    if (actionButton) {
        actionButton.addEventListener("click", function (event) {
            event.stopPropagation();
            event.preventDefault();

            Swal.fire({
                title: isCancelable ? 'Cancel Booking?' : 'Are you sure?',
                text: isCancelable
                    ? "Do you really want to cancel this booking?"
                    : "Do you really want to delete this booking?",
                icon: isCancelable ? 'warning' : 'error',
                showCancelButton: true,
                confirmButtonText: isCancelable ? 'Yes, cancel it!' : 'Yes, delete it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (!result.isConfirmed) return;

                let requestType = isCancelable ? "PATCH" : "DELETE";
                let requestData = isCancelable ? { requestStatus: 0 } : {};

                sendRequest(apiurl + "/" + modname + "/" + booking.id, requestType, requestData)
                    .then(response => {
                        if (response.status === "success") {
                            Swal.fire({
                                icon: 'success',
                                title: isCancelable ? 'Booking Canceled!' : 'Deleted!',
                                text: isCancelable ? 
                                    'Booking has been successfully set to Canceled.' : 
                                    'Booking deleted successfully!',
                                timer: 2000,
                                showConfirmButton: false
                            });

                            // Hanya update booking yang diubah
                            let updatedData = schedulerInstance.option("dataSource").map(item => {
                                if (item.id === booking.id) {
                                    return { ...item, requestStatus: 0 }; // Update status
                                }
                                return item;
                            });

                            // Gunakan salinan baru agar tidak mempengaruhi data lain
                            schedulerInstance.option("dataSource", JSON.parse(JSON.stringify(updatedData)));
                            schedulerInstance.repaint();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message || "Failed to update booking."
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.responseText || "Unknown error."
                        });
                    });
            });
        });
    }
}, 200);




function repaintScheduler() {
    if (!schedulerInstance) {
        console.warn("⚠️ schedulerInstance belum diinisialisasi. Tunggu sampai Scheduler siap.");
        return;
    }

    let url = apiurl + "/" + modname;
    console.log("🔄 Fetching new data from:", url);

    sendRequest(url, "GET")
        .then(newData => {
            console.log("✅ Data Fetched:", newData);

            if (!Array.isArray(newData) || newData.length === 0) {
                console.warn("⚠️ Warning: Data kosong setelah update!");
                return;
            }

            // Buat salinan baru dari data agar perubahan tidak mempengaruhi referensi lama
            let freshData = JSON.parse(JSON.stringify(newData));

            schedulerInstance.option("dataSource", freshData);
            schedulerInstance.repaint();
        })
        .catch(error => {
            console.error("❌ Gagal mengambil data terbaru:", error);
        });
}
