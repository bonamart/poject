$(function() {
    let dataSubmitted = false;

    function submitFormData() {
        if (dataSubmitted) return; // Prevent duplicate submissions

        dataSubmitted = true;
        const formData = $('#booking-form').serializeArray();

        const guestField = formData.find(field => field.name === 'guest');
        guestField.value = (guestField.value.split(',').map(name => name.trim()));

        const familyField = formData.find(field => field.name === 'family');
        familyField.value = serializeToJSON(familyField.value.split(',').map(name => name.trim()));

        sendRequest(apiurl + "/" + modname, "POST", formData).then(function(response) {
            if (response.status === 'success') {
                alert('Booking created successfully!');
                location.reload(); // Reload page to reflect new booking
            } else {
                alert('Error: ' + response.message);
            }
        }).catch(function(error) {
            alert('Error: ' + error.responseText);
        }).finally(function() {
            dataSubmitted = false; // Reset the flag after submission
        });
    }

    $('#booking-form').on('submit', function(event) {
        event.preventDefault();
        submitFormData();
    });

    // Fungsi untuk merefresh scheduler
    function refreshScheduler() {
        console.log('Refreshing scheduler...');

        const scheduler = $('#scheduler-container').dxScheduler('instance');

        fetch(apiurl + "/getAppointments")
            .then(response => response.json())
            .then(newData => {
                scheduler.option('dataSource', newData);
                scheduler.repaint();
                console.log('Scheduler refreshed successfully!');
                alert('Scheduler refreshed!');
            })
            .catch(error => {
                console.error('Error refreshing scheduler:', error);
                alert('Failed to refresh scheduler.');
            });
    }

    // Tambahkan tombol refresh di samping location-selector dan room-selector
    $('#location-selector').after('<button id="refresh-location" class="dx-button">ðŸ”„ Refresh</button>');
    $('#room-selector').after('<button id="refresh-room" class="dx-button">ðŸ”„ Refresh</button>');

    // Event handler untuk tombol refresh
    $('#refresh-location, #refresh-room').on('click', function() {
        refreshScheduler();
    });

    $('#location-selector').dxSelectBox({
        dataSource: uniqueLocations,
        displayExpr: function(item) {
            return item || "";
        },
        valueExpr: function(item) {
            return item;
        },
        value: uniqueLocations[0],
        onValueChanged: function(e) {
            const selectedLocation = e.value;
            updateRoomSelector(selectedLocation);
        }
    });

    function updateRoomSelector(location) {
        const filteredRooms = roomsWithLocations.filter(emp => emp.location === location);
        $('#room-selector').dxSelectBox({
            dataSource: filteredRooms,
            displayExpr: 'text',
            valueExpr: 'id',
            value: null,
            placeholder: 'Select Room',
            onValueChanged: function(e) {
                const selectedRoomId = e.value;
                updateScheduler(location, selectedRoomId);
            }
        });

        updateScheduler(location, null);
    }
});
