public function index(Request $request)
{
    try {
        $rooms = Ghm_room::all();
        $locations = Location::all();
        $ghms = Ghm::all();
        
        $id = $request->id;
        $user_id = $this->getAuth()->id;
        $employeeid = $this->getEmployeeID()->id;
        $module_id = $this->getModuleId($this->modulename);
        $isAdmin = $this->getAuth()->isAdmin;
        $requestData = $request->all();            

        // Mapping booking
        $booking = $ghms->map(function ($request) use ($rooms, $locations) {
            $room = $rooms->firstWhere('id', $request->ghm_room_id);
            $location = $room ? $locations->firstWhere('id', $room->location_id) : null;
        
            return [                
                'guest' => $request->guest,
                'family' => $request->family,
                'employee_id' => $request->employee_id,
            ];
        });
       
        $dataquery = $this->model->query();

        $subquery = "(select TOP 1 
        CASE WHEN a.user_id='".$user_id."' 
        then 1 else 0 end 
        from tbl_approverListReq l
        left join tbl_approver a on l.approver_id=a.id
        left join tbl_approvaltype r on a.approvaltype_id = r.id 
        where l.ApprovalAction='1' 
        and l.req_id = request_ghm.id and l.module_id = '".$module_id."' 
        and request_ghm.requestStatus='1'
        order by a.sequence)";

        if(!$isAdmin) {
            $dataquery->selectRaw("CASE WHEN tbl_assignment.employee_id = '".$employeeid."' then 1 else 0 end as isPIC");
            $dataquery->leftJoin('tbl_assignment', function($join) use ($user_id, $module_id) {
                $join->on('request_ghm.id','=','tbl_assignment.req_id')
                    ->where("request_ghm.user_id", "!=", $user_id)
                    ->where('tbl_assignment.module_id', $module_id);
            });
        }

        $data = $dataquery
            ->selectRaw("request_ghm.*, codes.code, request_ghm_room.location_id, employee.tbl_location.Location, request_ghm_room.roomName,
                (SELECT STRING_AGG(e.FullName, ', ') FROM employee e WHERE e.id IN (SELECT value FROM OPENJSON(request_ghm.employee_id))) AS employee_id,
                (SELECT STRING_AGG(value, ', ') FROM OPENJSON(request_ghm.guest)) AS guest,
                (SELECT STRING_AGG(value, ', ') FROM OPENJSON(request_ghm.family)) AS family,
                CASE WHEN request_ghm.user_id='".$user_id."' then 1 else 0 end as isMine,
                " . $subquery . " as isPendingOnMe")
            ->leftJoin('codes', 'request_ghm.code_id', '=', 'codes.id')
            ->leftJoin('request_ghm_room', 'request_ghm.ghm_room_id', '=', 'request_ghm_room.id')
            ->leftJoin('employee.tbl_location', 'request_ghm_room.location_id', '=', 'employee.tbl_location.id')
            ->with(['user', 'approverlist'])
            ->where(function ($query) use ($subquery, $user_id, $isAdmin, $employeeid, $module_id) {
                $query->whereRaw($subquery . " = 1")
                    ->orWhere(function ($query) use ($user_id, $isAdmin, $employeeid, $module_id) {
                        if ($isAdmin) {
                            $query->where("request_ghm.user_id", "!=", $user_id)
                                ->whereIn("request_ghm.requestStatus", [0,1,3,4]);
                        }
                         else {
                            $query->where("tbl_assignment.employee_id", $employeeid)
                                ->whereIn("request_ghm.requestStatus", [3]);
                        }
                    })
                    ->orWhere("request_ghm.user_id", $user_id);
            })
            ->orderBy(DB::raw($subquery), 'DESC')
            ->orderByRaw("CASE WHEN request_ghm.user_id = '".$user_id."' THEN 0 ELSE 1 END, request_ghm.created_at desc")
            ->get();

        return response()->json([
            'status' => "show",
            'message' => $this->getMessage()['show'],
            'data' => $data,
            'locations' => $locations,
            'rooms' => $rooms,
            'booking' => $booking
        ])->setEncodingOptions(JSON_NUMERIC_CHECK);

    } catch (\Exception $e) {

        return response()->json(["status" => "error", "message" => $e->getMessage()]);
    }
}

=========

onAppointmentFormOpening: function(e) {
    const form = e.form;
    const booking = e.appointmentData;

    form.option("items", [
        {
            itemType: "group",
            caption: "Booking Details",
            template: function(data, itemElement) {
                itemElement.append(`
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr>
                            <th style="border: 1px solid #ccc; padding: 8px;">Booking Title</th>
                            <th style="border: 1px solid #ccc; padding: 8px;">Start Date</th>
                            <th style="border: 1px solid #ccc; padding: 8px;">End Date</th>
                        </tr>
                        <tr>
                            <td style="border: 1px solid #ccc; padding: 8px;">${booking.text || ""}</td>
                            <td style="border: 1px solid #ccc; padding: 8px;">${new Date(booking.startDate).toLocaleString()}</td>
                            <td style="border: 1px solid #ccc; padding: 8px;">${new Date(booking.endDate).toLocaleString()}</td>
                        </tr>
                    </table>
                `);
            }
        },
        {
            itemType: "group",
            colCount: 1, 
            items: [
                { 
                    dataField: "requestStatus", 
                    label: { text: "Approval Status" },
                    editorType: "dxTextBox",
                    editorOptions: { 
                        readOnly: true, 
                        value: booking.requestStatus == 1 ? "✔ Approved" : "✘ Not Approved"
                    }
                }
            ]
        },
        {
            itemType: "button",
            horizontalAlignment: "right",
            buttonOptions: {
                text: "Approve",
                type: "success",
                onClick: function() {
                    approveBooking(booking.id);
                },
                disabled: booking.requestStatus == 1 // Disable jika sudah di-approve
            }
        }
    ]);
}


onAppointmentFormOpening: function(e) {
    const form = e.form;
    const booking = e.appointmentData;

    form.option("items", [
        {
            itemType: "group",
            caption: "Booking Details",
            items: [
                { dataField: "text", editorType: "dxTextBox", label: { text: "Booking Title" } },
                { dataField: "startDate", editorType: "dxDateBox", label: { text: "Start Date" } },
                { dataField: "endDate", editorType: "dxDateBox", label: { text: "End Date" } },
                { 
                    dataField: "requestStatus", 
                    label: { text: "Approval Status" },
                    editorType: "dxTextBox",
                    editorOptions: { 
                        readOnly: true, 
                        value: booking.requestStatus == 1 ? "✔ Approved" : "✘ Not Approved"
                    }
                }
            ]
        },
        {
            itemType: "button",
            horizontalAlignment: "right",
            buttonOptions: {
                text: "Approve",
                type: "success",
                onClick: function() {
                    approveBooking(booking.id);
                },
                disabled: booking.requestStatus == 1 // Disable jika sudah di-approve
            }
        }
    ]);
}
