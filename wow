public function dashboard()
{
    $user = auth()->user();
    if (!$user) {
        return redirect()->route('login');
    }

    $userId = $user->id;
    $isAdmin = $user->isAdmin ?? false;
    $employeeId = $user->employee_id ?? null;

    $requests = Ghm::query()
        ->where(function ($query) use ($userId, $isAdmin, $employeeId) {
            if ($isAdmin) {
                $query->where("request_ghm.user_id", "!=", $userId)
                    ->whereIn("request_ghm.requestStatus", [0, 1, 3, 4]);
            } else {
                $query->where("tbl_assignment.employee_id", $employeeId)
                    ->whereIn("request_ghm.requestStatus", [3]);
            }
        })
        ->orWhere("request_ghm.user_id", $userId)
        ->with(['User', 'code', 'ghm_room'])
        ->get();

    $rooms = Ghm_room::all();
    $locations = Location::all();
    $employees = Employee::with('Department')->get();
    $departments = Department::all();

    $totalPeopleData = DB::table('request_ghm')
        ->selectRaw('id, COALESCE(SUM(employee_count + guest_count + family_count), 0) as totalAll')
        ->groupBy('id')
        ->get();

    $totalPeopleArray = $totalPeopleData->mapWithKeys(function ($item) {
        return [$item->id => $item->totalAll];
    });

    // Handle case when there are no bookings
    if ($requests->isEmpty()) {
        $booking = [];
    } else {
        $booking = $requests->map(function ($request) use ($rooms, $locations, $totalPeopleArray) {
            $room = $rooms->firstWhere('id', $request->ghm_room_id);
            $location = $room ? $locations->firstWhere('id', $room->location_id) : null;
            $totalPeople = $totalPeopleArray[$request->id] ?? 0;

            return [
                'id' => $request->id,
                'text' => $request->text ?? '',
                'guest' => $request->guest ?? 0,
                'family' => $request->family ?? 0,
                'employee_id' => $request->employee_id ?? null,
                'ticketstatus' => $request->ticketStatus ?? null,
                'completeddate' => $request->completeddate ?? null,
                'confirmationStatus' => $request->confirmationStatus ?? null,
                'description' => $request->description ?? '',
                'requestStatus' => $request->requestStatus ?? 0,
                'startDate' => optional($request->startDate)->toIso8601String(),
                'endDate' => optional($request->endDate)->toIso8601String(),
                'code' => optional($request->code)->code ?? null,
                'creator' => optional($request->User)->fullname ?? null,
                'ghm_room_id' => $request->ghm_room_id,
                'roomName' => optional($room)->roomName ?? null,
                'location' => optional($location)->Location ?? null,
                'totalPeople' => $totalPeople,
            ];
        });
    }

    $roomsWithLocations = $rooms->map(function ($room) use ($locations) {
        $location = $locations->firstWhere('id', optional($room)->location_id);
        return [
            'text' => optional($room)->roomName ?? 'N/A',
            'id' => optional($room)->id ?? null,
            'roomAccupancy' => optional($room)->roomAccupancy ?? 0,
            'location' => optional($location)->Location ?? 'N/A',
            'color' => '#' . substr(md5(optional($room)->roomName ?? 'default'), 0, 6),
        ];
    });

    $uniqueLocations = $roomsWithLocations->pluck('location')->unique()->values();

    return view('dashboard.ghm_booking', [
        'booking' => $booking,
        'roomsWithLocations' => $roomsWithLocations,
        'uniqueLocations' => $uniqueLocations,
        'emplo' => $employees,
        'departments' => $departments,
    ]);
}
