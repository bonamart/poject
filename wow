// Fungsi untuk mengecek apakah dua rentang tanggal beririsan
function isDateOverlap(start1, end1, start2, end2) {
    return (new Date(start1) <= new Date(end2)) && (new Date(start2) <= new Date(end1));
}

// Fungsi untuk memastikan array selalu valid (menghindari null/undefined)
function safeArray(arr) {
    return Array.isArray(arr) ? arr : [];
}

// Fungsi untuk menghitung total tamu pada tanggal yang beririsan dengan booking baru
function getTotalGuestsForDateLocally(scheduler, roomId, startDate, endDate) {
    let appointments = scheduler.getDataSource().items(); // Ambil semua booking yang sudah ada
    let totalGuests = 0;

    appointments.forEach(appointment => {
        if (
            appointment.ghm_room_id === roomId &&
            isDateOverlap(appointment.startDate, appointment.endDate, startDate, endDate)
        ) {
            let guestCount = safeArray(appointment.guest).length;
            let familyCount = safeArray(appointment.family).length;
            let employeeCount = safeArray(appointment.employee_id).length;
            totalGuests += guestCount + familyCount + employeeCount;
        }
    });

    return totalGuests;
}

// Fungsi validasi booking saat membuka form
function validateBooking(form) {
    let guestCount = safeArray(form.getEditor("guest")?.option("value")).length;
    let familyCount = safeArray(form.getEditor("family")?.option("value")).length;
    let employeeCount = safeArray(form.getEditor("employee_id")?.option("value")).length;
    let totalGuests = guestCount + familyCount + employeeCount;

    let selectedRoom = form.getEditor("ghm_room_id")?.option("value");
    let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomAccupancy || 0;

    let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");

    if (totalGuests > roomCapacity) {
        DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
    }
}

// Event saat user ingin menambahkan booking baru
onAppointmentAdding: function(e) {
    const appointmentData = e.appointmentData;
    let scheduler = e.component;

    let guestCount = safeArray(appointmentData.guest).length;
    let familyCount = safeArray(appointmentData.family).length;
    let employeeCount = safeArray(appointmentData.employee_id).length;
    let totalNewGuests = guestCount + familyCount + employeeCount;

    let selectedRoom = appointmentData.ghm_room_id;
    let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomAccupancy || 0;

    // Hitung total tamu yang sudah ada dalam rentang tanggal booking baru
    let currentGuests = getTotalGuestsForDateLocally(scheduler, selectedRoom, appointmentData.startDate, appointmentData.endDate);
    let totalGuestsAfterAdding = currentGuests + totalNewGuests;

    if (totalGuestsAfterAdding > roomCapacity) {
        e.cancel = true; // Batalkan booking
        DevExpress.ui.notify(`Kapasitas kamar penuh! (${currentGuests}/${roomCapacity})`, "error", 3000);
        return;
    }

    // Serialize array sebelum dikirim
    appointmentData.guest = JSON.stringify(appointmentData.guest);
    appointmentData.family = JSON.stringify(appointmentData.family);

    // Kirim data booking ke server
    sendRequest(apiurl + "/" + modname, "POST", {
        requestStatus: 0,
        text: appointmentData.text,
        description: appointmentData.description,
        startDate: appointmentData.startDate,
        endDate: appointmentData.endDate,
        ghm_room_id: appointmentData.ghm_room_id,
        employee_id: appointmentData.employee_id,
        guest: appointmentData.guest,
        family: appointmentData.family
    }).then(function(response) {
        if (response.status === 'success') {
            e.component._dataSource.reload();
            DevExpress.ui.notify("Booking berhasil dibuat!", "success", 2000);
        } else {
            DevExpress.ui.notify("Error: " + response.message, "error", 3000);
        }
    }).catch(function(error) {
        DevExpress.ui.notify("Error: " + error.responseText, "error", 3000);
    });
},

// Event saat user ingin mengupdate booking
onAppointmentUpdating: function(e) {
    const appointmentData = e.newData;
    appointmentData.id = e.oldData.id;

    appointmentData.guest = JSON.stringify(appointmentData.guest);
    appointmentData.family = JSON.stringify(appointmentData.family);

    sendRequest(apiurl + "/" + modname + "/" + appointmentData.id, "PUT", {
        text: appointmentData.text,
        description: appointmentData.description,
        startDate: appointmentData.startDate,
        endDate: appointmentData.endDate,
        ghm_room_id: appointmentData.ghm_room_id,
        employee_id: appointmentData.employee_id,
        guest: appointmentData.guest,
        family: appointmentData.family,
        id: appointmentData.id
    }).then(function(response) {
        if (response.status === 'success') {
            e.component._dataSource.reload();
            alert('Booking updated successfully!');
        } else {
            alert('Error: ' + response.message);
        }
    }).catch(function(error) {
        alert('Error: ' + error.responseText);
    });
}
