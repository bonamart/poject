onAppointmentUpdating: function(e) {
    const appointmentData = e.newData;

    // Format tanggal untuk database
    const formatDateForDB = (date) => {
        const d = new Date(date);
        return `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, '0')}-${d.getDate().toString().padStart(2, '0')} ${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}:${d.getSeconds().toString().padStart(2, '0')}`;
    };

    appointmentData.startDate = formatDateForDB(appointmentData.startDate);
    appointmentData.endDate = formatDateForDB(appointmentData.endDate);
    appointmentData.id = e.oldData.id; // Pastikan id disertakan

    // Serialisasi array (jika ada)
    appointmentData.guest = Array.isArray(appointmentData.guest) ? JSON.stringify(appointmentData.guest) : null;
    appointmentData.family = Array.isArray(appointmentData.family) ? JSON.stringify(appointmentData.family) : null;

    console.log('Data yang akan dikirim:', appointmentData);

    // Logika untuk status tiket dan konfirmasi
    var newTicketStatus = e.newData.ticketStatus;
    var newConfirmationStatus = e.newData.confirmationStatus;

    if (newTicketStatus === "Completed") {
        if (!confirm("Are you sure you want to mark this ticket as completed?")) {
            e.cancel = true;
        } else {
            e.newData.confirmationStatus = 'Waiting';
            e.component.columnOption("ticketStatus", "allowEditing", false);
        }
    }

    if (newConfirmationStatus === "Reworked") {
        if (!confirm("Are you sure you want to mark this confirmation status as reworked?")) {
            e.cancel = true;
        } else {
            e.newData.ticketStatus = 'On Queue';
            e.component.columnOption("confirmationStatus", "allowEditing", false);
            e.component.columnOption("confirmationRemarks", "allowEditing", false);
        }
    }

    if (newConfirmationStatus === "Completed") {
        if (!confirm("Are you sure you want to mark this confirmation status as completed?")) {
            e.cancel = true;
        } else {
            e.component.columnOption("confirmationStatus", "allowEditing", false);
            e.component.columnOption("confirmationRemarks", "allowEditing", false);
        }
    }

    // Konfirmasi dengan SweetAlert
    Swal.fire({
        title: 'What do you want to do?',
        text: 'Choose an option for this booking',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Submit Now',
        cancelButtonText: 'Save as Draft',
        reverseButtons: true
    }).then((result) => {
        let actionText = result.isConfirmed ? 'submitted' : 'saved as draft';

        sendRequest(apiurl + "/" + modname + "/" + appointmentData.id, "PUT", {
            text: appointmentData.text,
            description: appointmentData.description,
            startDate: appointmentData.startDate,
            endDate: appointmentData.endDate,
            ghm_room_id: appointmentData.ghm_room_id,
            employee_id: appointmentData.employee_id,
            guest: appointmentData.guest,
            family: appointmentData.family,
            id: appointmentData.id
        }).then(function(response) {
            if (response.status === 'success') {
                e.component._dataSource.reload();
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: `Booking has been ${actionText}.`,
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                Swal.fire({ icon: 'error', title: 'Error', text: response.message });
            }
        }).catch(function(error) {
            Swal.fire({ icon: 'error', title: 'Error', text: error.responseText });
        });
    });
}
