function getTotalGuestsForDateLocally(scheduler, roomId, startDate) {
    let appointments = scheduler.getDataSource().items(); // Ambil semua booking yang sudah ada

    let totalGuests = 0;

    appointments.forEach(appointment => {
        if (appointment.ghm_room_id === roomId && isSameDate(appointment.startDate, startDate)) {
            let guestCount = (appointment.guest || []).length;
            let familyCount = (appointment.family || []).length;
            let employeeCount = (appointment.employee_id || []).length;
            totalGuests += guestCount + familyCount + employeeCount;
        }
    });

    return totalGuests;
}

// Fungsi untuk membandingkan tanggal tanpa memperhitungkan waktu
function isSameDate(date1, date2) {
    let d1 = new Date(date1);
    let d2 = new Date(date2);
    return d1.toDateString() === d2.toDateString();
}
onAppointmentAdding: function(e) {
    const appointmentData = e.appointmentData;
    let scheduler = e.component;

    let guestCount = (appointmentData.guest || []).length;
    let familyCount = (appointmentData.family || []).length;
    let employeeCount = (appointmentData.employee_id || []).length;
    let totalNewGuests = guestCount + familyCount + employeeCount;

    let selectedRoom = appointmentData.ghm_room_id;
    let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.capacity || 0;

    // Hitung total tamu yang sudah ada tanpa AJAX
    let currentGuests = getTotalGuestsForDateLocally(scheduler, selectedRoom, appointmentData.startDate);
    
    let totalGuestsAfterAdding = currentGuests + totalNewGuests;

    if (totalGuestsAfterAdding > roomCapacity) {
        e.cancel = true; // Batalkan booking
        DevExpress.ui.notify(`Kapasitas kamar penuh! (${currentGuests}/${roomCapacity})`, "error", 3000);
        return;
    }

    // Serialize array sebelum dikirim
    appointmentData.guest = serializeToJSON(appointmentData.guest);
    appointmentData.family = serializeToJSON(appointmentData.family);
    appointmentData.employee_id = serializeToJSON(appointmentData.employee_id);

    sendRequest(apiurl + "/" + modname, "POST", {
        requestStatus: 0,
        text: appointmentData.text,
        description: appointmentData.description,
        startDate: appointmentData.startDate,
        endDate: appointmentData.endDate,
        ghm_room_id: appointmentData.ghm_room_id,
        employee_id: appointmentData.employee_id,
        guest: appointmentData.guest,
        family: appointmentData.family
    }).then(function(response) {
        if (response.status === 'success') {
            e.component._dataSource.reload();
            DevExpress.ui.notify("Booking berhasil dibuat!", "success", 2000);
        } else {
            DevExpress.ui.notify("Error: " + response.message, "error", 3000);
        }
    }).catch(function(error) {
        DevExpress.ui.notify("Error: " + error.responseText, "error", 3000);
    });
}


onAppointmentFormOpening: function(e) {
    const form = e.form;
    const appointmentData = e.appointmentData;
    const isNewAppointment = !appointmentData.id;

    console.log('Appointment Data:', appointmentData); // Debug log

    if (appointmentData.employee_id && typeof appointmentData.employee_id === 'string') {
        appointmentData.employee_id = deserializeFromJSON(appointmentData.employee_id);
    }
    if (appointmentData.guest && typeof appointmentData.guest === 'string') {
        appointmentData.guest = deserializeFromJSON(appointmentData.guest);
    } else if (!appointmentData.guest) {
        appointmentData.guest = [];
    }
    if (appointmentData.family && typeof appointmentData.family === 'string') {
        appointmentData.family = deserializeFromJSON(appointmentData.family);
    } else if (!appointmentData.family) {
        appointmentData.family = [];
    }

    function validateBooking() {
        let guestCount = (form.getEditor("guest")?.option("value") || []).length;
        let familyCount = (form.getEditor("family")?.option("value") || []).length;
        let employeeCount = (form.getEditor("employee_id")?.option("value") || []).length;

        let totalGuests = guestCount + familyCount + employeeCount;
        let selectedRoom = form.getEditor("ghm_room_id")?.option("value");

        let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.capacity || 0;

        let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");

        if (totalGuests > roomCapacity) {
            doneButton.addClass("dx-state-disabled");
            DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
        } else {
            doneButton.removeClass("dx-state-disabled");
        }
    }

    form.option('items', [
        {
            itemType: 'group',
            colCount: 1,
            caption: 'Interests',
            items: [
                {
                    label: { text: 'Code' },
                    editorType: 'dxTextBox',
                    dataField: 'code',
                    disabled: true,
                    editorOptions: { value: appointmentData.code || '' }
                },
                {
                    label: { text: 'Subject' },
                    editorType: 'dxTextBox',
                    dataField: 'text',
                    editorOptions: { value: appointmentData.text || '' }
                },
                {
                    label: { text: 'Description' },
                    editorType: 'dxTextArea',
                    dataField: 'description',
                    editorOptions: { value: appointmentData.description || '' }
                },
            ]
        },
        {
            itemType: 'group',
            caption: 'Room & Date',
            items: [
                {
                    label: { text: 'Room' },
                    editorType: 'dxSelectBox',
                    dataField: 'ghm_room_id',
                    editorOptions: {
                        dataSource: roomsWithLocations,
                        displayExpr: 'text',
                        valueExpr: 'id',
                        value: appointmentData.ghm_room_id || null,
                        onValueChanged: validateBooking
                    }
                },
                {
                    label: { text: 'Start Date' },
                    editorType: 'dxDateBox',
                    dataField: 'startDate',
                    editorOptions: {
                        type: 'datetime',
                        value: appointmentData.startDate || new Date(),
                        displayFormat: 'yyyy-MM-dd HH:mm:ss',
                        dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                    }
                },
                {
                    label: { text: 'End Date' },
                    editorType: 'dxDateBox',
                    dataField: 'endDate',
                    editorOptions: {
                        type: 'datetime',
                        value: appointmentData.endDate || new Date(),
                        displayFormat: 'yyyy-MM-dd HH:mm:ss',
                        dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                    }
                },
            ]
        },
        {
            itemType: 'group',
            colSpan: 2,
            caption: 'Guest Type',
            items: [
                {
                    title: 'Employee',
                    label: { text: 'Employee' },
                    editorType: 'dxTagBox',
                    dataField: 'employee_id',
                    editorOptions: {
                        dataSource: emplo,
                        displayExpr: function(item) {
                            if (!item) return "";
                            const department = departments.find(dept => dept.id === item.department_id);
                            return `${item.FullName} | ${item.SAPID} | ${department ? department.DepartmentName : "Failed"}`;
                        },
                        valueExpr: 'id',
                        value: Array.isArray(appointmentData.employee_id) ? appointmentData.employee_id : [],
                        showSelectionControls: true,
                        applyValueMode: 'useButtons',
                        searchEnabled: true,
                        onValueChanged: validateBooking
                    }
                },
                {
                    title: 'Guest',
                    editorType: 'dxTagBox',
                    dataField: 'guest',
                    editorOptions: {
                        value: Array.isArray(appointmentData.guest) ? appointmentData.guest : [],
                        acceptCustomValue: true,
                        searchEnabled: true,
                        showSelectionControls: true,
                        applyValueMode: 'useButtons',
                        onValueChanged: validateBooking
                    }
                },
                {
                    title: 'Family',
                    editorType: 'dxTagBox',
                    dataField: 'family',
                    editorOptions: {
                        value: Array.isArray(appointmentData.family) ? appointmentData.family : [],
                        acceptCustomValue: true,
                        searchEnabled: true,
                        showSelectionControls: true,
                        applyValueMode: 'useButtons',
                        onValueChanged: validateBooking
                    }
                }
            ]
        }
    ]);

    setTimeout(validateBooking, 100);
},

onAppointmentAdding: function(e) {
    const appointmentData = e.appointmentData;
    let guestCount = (appointmentData.guest || []).length;
    let familyCount = (appointmentData.family || []).length;
    let employeeCount = (appointmentData.employee_id || []).length;

    let totalGuests = guestCount + familyCount + employeeCount;
    let selectedRoom = appointmentData.ghm_room_id;
    let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.capacity || 0;

    if (totalGuests > roomCapacity) {
        e.cancel = true;
        DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
        return;
    }

    appointmentData.guest = serializeToJSON(appointmentData.guest);
    appointmentData.family = serializeToJSON(appointmentData.family);
    appointmentData.employee_id = serializeToJSON(appointmentData.employee_id);

    sendRequest(apiurl + "/" + modname, "POST", {
        requestStatus: 0,
        text: appointmentData.text,
        description: appointmentData.description,
        startDate: appointmentData.startDate,
        endDate: appointmentData.endDate,
        ghm_room_id: appointmentData.ghm_room_id,
        employee_id: appointmentData.employee_id,
        guest: appointmentData.guest,
        family: appointmentData.family
    }).then(function(response) {
        if (response.status === 'success') {
            e.component._dataSource.reload();
            alert('Booking created successfully!');
        } else {
            alert('Error: ' + response.message);
        }
    }).catch(function(error) {
        alert('Error: ' + error.responseText);
    });
}
============================================================================
============================================================================
============================================================================

onAppointmentFormOpening: function(e) {
    const form = e.form;
    const appointmentData = e.appointmentData;

    function getTotalGuestsForDate(roomId, startDate, callback) {
        $.ajax({
            url: `${apiurl}/getTotalGuests`, 
            method: 'GET',
            data: { roomId: roomId, date: startDate },
            success: function(response) {
                callback(response.totalPeople || 0, response.roomOccupancy || 0);
            },
            error: function() {
                callback(0, 0); 
            }
        });
    }

    function validateBooking() {
        let guestCount = (form.getEditor("guest")?.option("value") || []).length;
        let familyCount = (form.getEditor("family")?.option("value") || []).length;
        let employeeCount = (form.getEditor("employee_id")?.option("value") || []).length;
        let totalGuests = guestCount + familyCount + employeeCount;

        let selectedRoom = form.getEditor("ghm_room_id")?.option("value");
        let selectedDate = form.getEditor("startDate")?.option("value");

        getTotalGuestsForDate(selectedRoom, selectedDate, function(currentTotalGuests, roomCapacity) {
            let newTotalGuests = currentTotalGuests + totalGuests;
            let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");

            if (newTotalGuests > roomCapacity) {
                doneButton.addClass("dx-state-disabled");
                DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
            } else {
                doneButton.removeClass("dx-state-disabled");
            }
        });
    }

    form.option('items', [
        {
            itemType: 'group',
            colCount: 1,
            caption: 'Booking Details',
            items: [
                {
                    label: { text: 'Room' },
                    editorType: 'dxSelectBox',
                    dataField: 'ghm_room_id',
                    editorOptions: {
                        dataSource: roomsWithLocations,
                        displayExpr: 'text',
                        valueExpr: 'id',
                        value: appointmentData.ghm_room_id || null,
                        onValueChanged: validateBooking
                    }
                },
                {
                    label: { text: 'Start Date' },
                    editorType: 'dxDateBox',
                    dataField: 'startDate',
                    editorOptions: {
                        type: 'datetime',
                        value: appointmentData.startDate || new Date(),
                        onValueChanged: validateBooking
                    }
                },
            ]
        },
        {
            itemType: 'group',
            caption: 'Guests',
            items: [
                {
                    title: 'Employee',
                    editorType: 'dxTagBox',
                    dataField: 'employee_id',
                    editorOptions: {
                        dataSource: emplo,
                        displayExpr: 'FullName',
                        valueExpr: 'id',
                        value: Array.isArray(appointmentData.employee_id) ? appointmentData.employee_id : [],
                        onValueChanged: validateBooking
                    }
                },
                {
                    title: 'Guest',
                    editorType: 'dxTagBox',
                    dataField: 'guest',
                    editorOptions: {
                        value: Array.isArray(appointmentData.guest) ? appointmentData.guest : [],
                        acceptCustomValue: true,
                        onValueChanged: validateBooking
                    }
                },
                {
                    title: 'Family',
                    editorType: 'dxTagBox',
                    dataField: 'family',
                    editorOptions: {
                        value: Array.isArray(appointmentData.family) ? appointmentData.family : [],
                        acceptCustomValue: true,
                        onValueChanged: validateBooking
                    }
                }
            ]
        }
    ]);

    setTimeout(validateBooking, 100);
},

onAppointmentAdding: function(e) {
    const appointmentData = e.appointmentData;

    let guestCount = (appointmentData.guest || []).length;
    let familyCount = (appointmentData.family || []).length;
    let employeeCount = (appointmentData.employee_id || []).length;
    let totalGuests = guestCount + familyCount + employeeCount;

    let selectedRoom = appointmentData.ghm_room_id;
    let selectedDate = appointmentData.startDate;

    e.cancel = true;

    getTotalGuestsForDate(selectedRoom, selectedDate, function(currentTotalGuests, roomCapacity) {
        let newTotalGuests = currentTotalGuests + totalGuests;

        if (newTotalGuests > roomCapacity) {
            DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
        } else {
            sendRequest(apiurl + "/" + modname, "POST", {
                requestStatus: 0,
                text: appointmentData.text,
                description: appointmentData.description,
                startDate: appointmentData.startDate,
                endDate: appointmentData.endDate,
                ghm_room_id: appointmentData.ghm_room_id,
                employee_id: appointmentData.employee_id,
                guest: serializeToJSON(appointmentData.guest),
                family: serializeToJSON(appointmentData.family)
            }).then(function(response) {
                if (response.status === 'success') {
                    e.component._dataSource.reload();
                    DevExpress.ui.notify("Booking berhasil!", "success", 2000);
                } else {
                    DevExpress.ui.notify("Error: " + response.message, "error", 2000);
                }
            }).catch(function(error) {
                DevExpress.ui.notify("Error: " + error.responseText, "error", 2000);
            });
        }
    });
}

=============
============
onAppointmentFormOpening: function(e) {
    const form = e.form;
    const appointmentData = e.appointmentData;

    const isNewAppointment = !appointmentData.id;
    console.log('Appointment Data:', appointmentData); // Debug log

    if (appointmentData.employee_id && typeof appointmentData.employee_id === 'string') {
        appointmentData.employee_id = deserializeFromJSON(appointmentData.employee_id);
    }
    if (appointmentData.guest && typeof appointmentData.guest === 'string') {
        appointmentData.guest = deserializeFromJSON(appointmentData.guest);
    } else if (!appointmentData.guest) {
        appointmentData.guest = [];
    }
    if (appointmentData.family && typeof appointmentData.family === 'string') {
        appointmentData.family = deserializeFromJSON(appointmentData.family);
    } else if (!appointmentData.family) {
        appointmentData.family = [];
    }

    function validateBooking() {
        let guestCount = (form.getEditor("guest")?.option("value") || []).length;
        let familyCount = (form.getEditor("family")?.option("value") || []).length;
        let totalGuests = guestCount + familyCount;
        let selectedRoom = form.getEditor("ghm_room_id")?.option("value");
        
        let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.capacity || 0;

        let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");

        if (totalGuests > roomCapacity) {
            doneButton.addClass("dx-state-disabled");
        } else {
            doneButton.removeClass("dx-state-disabled");
        }
    }

    form.option('items', [
        {
            itemType: 'group',
            colCount: 1,
            caption: 'Interests',
            items: [
                {
                    label: { text: 'Code' },
                    editorType: 'dxTextBox',
                    dataField: 'code',
                    disabled: true,
                    editorOptions: { value: appointmentData.code || '' }
                },
                {
                    label: { text: 'Subject' },
                    editorType: 'dxTextBox',
                    dataField: 'text',
                    editorOptions: { value: appointmentData.text || '' }
                },
                {
                    label: { text: 'Description' },
                    editorType: 'dxTextArea',
                    dataField: 'description',
                    editorOptions: { value: appointmentData.description || '' }
                },
            ]
        },
        {
            itemType: 'group',
            caption: 'Room & Date',
            items: [
                {
                    label: { text: 'Room' },
                    editorType: 'dxSelectBox',
                    dataField: 'ghm_room_id',
                    editorOptions: {
                        dataSource: roomsWithLocations,
                        displayExpr: 'text',
                        valueExpr: 'id',
                        value: appointmentData.ghm_room_id || null,
                        onValueChanged: validateBooking
                    }
                },
                {
                    label: { text: 'Start Date' },
                    editorType: 'dxDateBox',
                    dataField: 'startDate',
                    editorOptions: {
                        type: 'datetime',
                        value: appointmentData.startDate || new Date(),
                        displayFormat: 'yyyy-MM-dd HH:mm:ss',
                        dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                    }
                },
                {
                    label: { text: 'End Date' },
                    editorType: 'dxDateBox',
                    dataField: 'endDate',
                    editorOptions: {
                        type: 'datetime',
                        value: appointmentData.endDate || new Date(),
                        displayFormat: 'yyyy-MM-dd HH:mm:ss',
                        dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                    }
                },
            ]
        },
        {
            itemType: 'group',
            colSpan: 2,
            caption: 'Guest Type',
            items: [
                {
                    title: 'Employee',
                    label: { text: 'Employee' },
                    editorType: 'dxTagBox',
                    dataField: 'employee_id',
                    editorOptions: {
                        dataSource: emplo,
                        displayExpr: function(item) {
                            if (!item) return "";
                            const department = departments.find(dept => dept.id === item.department_id);
                            return `${item.FullName} | ${item.SAPID} | ${department ? department.DepartmentName : "Failed"}`;
                        },
                        valueExpr: 'id',
                        value: Array.isArray(appointmentData.employee_id) ? appointmentData.employee_id : [],
                        showSelectionControls: true,
                        applyValueMode: 'useButtons',
                        searchEnabled: true
                    }
                },
                {
                    title: 'Guest',
                    editorType: 'dxTagBox',
                    dataField: 'guest',
                    editorOptions: {
                        value: Array.isArray(appointmentData.guest) ? appointmentData.guest : [],
                        acceptCustomValue: true,
                        searchEnabled: true,
                        showSelectionControls: true,
                        applyValueMode: 'useButtons',
                        onValueChanged: validateBooking,
                        onCustomItemCreating: function(args) {
                            let newValue = args.text;
                            let guests = form.option('formData').guest || [];
                            if (!guests.includes(newValue)) {
                                guests.push(newValue);
                                args.customItem = newValue;
                            } else {
                                args.customItem = null;
                            }
                            form.updateData('guest', guests);
                            validateBooking();
                        }
                    }
                },
                {
                    title: 'Family',
                    editorType: 'dxTagBox',
                    dataField: 'family',
                    editorOptions: {
                        value: Array.isArray(appointmentData.family) ? appointmentData.family : [],
                        acceptCustomValue: true,
                        searchEnabled: true,
                        showSelectionControls: true,
                        applyValueMode: 'useButtons',
                        onValueChanged: validateBooking,
                        onCustomItemCreating: function(args) {
                            let newValue = args.text;
                            let familys = form.option('formData').family || [];
                            if (!familys.includes(newValue)) {
                                familys.push(newValue);
                                args.customItem = newValue;
                            } else {
                                args.customItem = null;
                            }
                            form.updateData('family', familys);
                            validateBooking();
                        }
                    }
                }
            ]
        }
    ]);

    setTimeout(validateBooking, 100);
},

onAppointmentAdding: function(e) {
    const appointmentData = e.appointmentData;
    let guestCount = (appointmentData.guest || []).length;
    let familyCount = (appointmentData.family || []).length;
    let totalGuests = guestCount + familyCount;
    let selectedRoom = appointmentData.ghm_room_id;
    let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.capacity || 0;

    if (totalGuests > roomCapacity) {
        e.cancel = true;
        DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
        return;
    }

    appointmentData.guest = serializeToJSON(appointmentData.guest);
    appointmentData.family = serializeToJSON(appointmentData.family);

    sendRequest(apiurl + "/" + modname, "POST", {
        requestStatus: 0,
        text: appointmentData.text,
        description: appointmentData.description,
        startDate: appointmentData.startDate,
        endDate: appointmentData.endDate,
        ghm_room_id: appointmentData.ghm_room_id,
        employee_id: appointmentData.employee_id,
        guest: appointmentData.guest,
        family: appointmentData.family
    }).then(function(response) {
        if (response.status === 'success') {
            e.component._dataSource.reload();
            alert('Booking created successfully!');
        } else {
            alert('Error: ' + response.message);
        }
    }).catch(function(error) {
        alert('Error: ' + error.responseText);
    });
}
==================
resourceCellTemplate: function(cellData) {
    const name = $('<div>')
        .addClass('name')                    
        .append($('<h2>').text(cellData.text));

    const roomAccupancy = $('<div>')
        .addClass('roomAccupancy')
        .html(`Bed: ${cellData.data.roomAccupancy}`);

    // Tentukan warna berdasarkan jumlah bed
    let bgColor;
    if (cellData.data.roomAccupancy > 5) {
        bgColor = "#4caf50"; // Hijau untuk kamar dengan banyak bed
    } else if (cellData.data.roomAccupancy > 2) {
        bgColor = "#ff9800"; // Oranye untuk kamar dengan kapasitas sedang
    } else {
        bgColor = "#f44336"; // Merah untuk kamar dengan kapasitas sedikit
    }

    const combinedColumn = $('<div>')
        .addClass('combined-column')
        .append(name, roomAccupancy)
        .css({
            backgroundColor: bgColor,
            padding: '10px',
            borderRadius: '5px',
            color: '#fff',
            textAlign: 'center'
        });

    return combinedColumn;
},

onCellPrepared: function(e) {
    // **Sembunyikan kolom 'code' jika null**
    if (e.rowType == "data" && e.column.dataField === "code") {
        const isCodeVisible = e.data.code !== null;
        $("#formdata").dxDataGrid('columnOption', 'code', 'visible', isCodeVisible);
    }

    // **Tandai sel kosong dengan warna merah muda**
    if (e.rowType == "data" && (e.column.index > 0 && e.column.index < 6)) {
        if (!e.value || /^\s*$/.test(e.value)) {
            e.cellElement.css({
                "backgroundColor": "#ffe6e6",
                "border": "0.5px solid #f56e6e"
            });
        }
    }

    // **Tandai baris dengan `isParent === 1`**
    if (e.rowType == "data" && e.data.isParent === 1) {
        e.cellElement.css('background', 'rgba(128, 128, 0, 0.1)');
    }
}
==========
resourceCellTemplate: function(cellData) {
    const name = $('<div>')
        .addClass('name')                    
        .append($('<h2>').text(cellData.text));

    const roomAccupancy = $('<div>')
        .addClass('roomAccupancy')
        .html(`Bed: ${cellData.data.roomAccupancy}`);

    // Tentukan warna berdasarkan jumlah bed
    let bgColor;
    if (cellData.data.roomAccupancy > 5) {
        bgColor = "#4caf50"; // Hijau untuk kamar dengan banyak bed
    } else if (cellData.data.roomAccupancy > 2) {
        bgColor = "#ff9800"; // Oranye untuk kamar dengan kapasitas sedang
    } else {
        bgColor = "#f44336"; // Merah untuk kamar dengan kapasitas sedikit
    }

    const combinedColumn = $('<div>')
        .addClass('combined-column')
        .append(name, roomAccupancy)
        .css({
            backgroundColor: bgColor,
            padding: '10px',
            borderRadius: '5px',
            color: '#fff'
        });

    return combinedColumn;
}
